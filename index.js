const express = require("express");
const mongoose = require("mongoose");
const jwt = require("jsonwebtoken");
const generateProfileImage = require("./tghandlers/profile_image.js");
const bot = require("./bot.js");
const User = require("./models/user.js");
const Gallery = require("./models/gallery.js");

const router = require("./router.js");

const API_KEY_BOT = "6855579648:AAF29wJqMxl_QCdy9RCjesGojgSduJxJrLY";

const app = express();
app.use(express.json());
app.use(function (req, res, next) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET", "POST");
  res.setHeader(
    "Access-Control-Allow-Headers",
    "X-Requested-With,content-type,Authorization"
  );
  res.setHeader("Access-Control-Allow-Credentials", true);
  next();
});
app.use("/", router);

const PORT = process.env.PORT || 8000;

app.listen(PORT, () => {
  try {
    console.log("–°–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª!!! –ü–æ—Ä—Ç:", PORT);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞!", err);
  }
});

app.post(`/bot${API_KEY_BOT}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

bot.on("polling_error", (err) => console.log(err.data.error.message));

bot.on("text", async (msg) => {
  bot.sendMessage(msg.chat.id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "iOS", callback_data: "iOS" },
          { text: "Android", callback_data: "Android" },
        ],
      ],
    },
  });
});

bot.on("callback_query", async (ctx) => {
  try {
    if (ctx.data.includes("acceptToClan")) {
      bot.sendMessage(ctx.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–æ–≤–µ—â–µ–Ω.");
      const user = User.findById(ctx.data.split(" ")[1]);
      bot.sendMessage(
        user.chatid,
        `üîî –ü–æ–∑–¥–∞–≤–ª—è–µ–º!\n<b>–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª–∞–Ω.</b> –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, <a href = "https://t.me/nwqosh">–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ —Å—Å—ã–ª–∫–æ–π</a>\n–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –≤—ã–¥–∞–Ω—ã`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        }
      );
      user.isClanMember = true;
      user.save();
    }
    if (ctx.data.includes("rejectFromClan")) {
      bot.sendMessage(ctx.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–æ–≤–µ—â–µ–Ω.");
      const user = User.findById(ctx.data.split(" ")[1]);
      bot.sendMessage(
        user.chatid,
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–º –Ω–µ –ø–æ–¥–æ—à–ª–∞. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Å–ª–µ–¥. —Ä–∞–∑!`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        }
      );
    }
    switch (ctx.data) {
      case "iOS":
        bot.sendPhoto(ctx.message.chat.id, "https://i.imgur.com/72MovHv.png", {
          caption: `–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–¥–ª—è iOS)`,
          reply_markup: {
            inline_keyboard: [[{ text: "–í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data: "done" }]],
          },
        });
        break;
      case "Android":
        bot.sendPhoto(ctx.message.chat.id, "https://i.imgur.com/hGWBYp2.png", {
          caption: `–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–¥–ª—è Android)`,
          reply_markup: {
            inline_keyboard: [[{ text: "–í—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data: "done" }]],
          },
        });
        break;
      case "done":
        bot.sendPhoto(ctx.message.chat.id, "https://i.imgur.com/fVhg0a8.png", {
          caption: `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É https://c2kq4hl1-5173.euw.devtunnels.ms/?token=${jwt.sign(
            ctx.message.chat.id,
            "urionzzz"
          )}&tgusername=${ctx.message.chat.username}&tgfirstname=${
            ctx.message.chat.first_name
          }&tglastname=${ctx.message.chat.last_name}`,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ù–∞–∂–º–∏—Ç–µ —Å—é–¥–∞",
                  url: `https://c2kq4hl1-5173.euw.devtunnels.ms/?token=${jwt.sign(
                    ctx.message.chat.id,
                    "urionzzz"
                  )}&tgusername=${ctx.message.chat.username}&tgfirstname=${
                    ctx.message.chat.first_name
                  }&tglastname=${ctx.message.chat.last_name}`,
                },
              ],
            ],
          },
        });
    }
  } catch (error) {
    console.log(error);
  }
});

bot.on("photo", async (img) => {
  try {
    let image = img.photo[img.photo.length - 2].file_id;
    let url = bot.getFile(image).file_path;
    console.log(url);

    let dbImage = new Gallery({
      src: `https://api.telegram.org/file/bot6855579648:AAF29wJqMxl_QCdy9RCjesGojgSduJxJrLY/${url}`,
    });
    bot.sendMessage(img.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    dbImage.save();
  } catch (err) {
    console.error(err);
  }
});

module.exports = app;
